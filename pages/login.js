import { useState, useEffect } from 'react';
import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import InputBox from '@/components/InputBox'
import Div from '@/components/Div'
import Typhography from '@/components/Typhography'
import { FaEnvelope, FaKey, } from 'react-icons/fa';
import { VscEyeClosed, VscEye } from 'react-icons/vsc';
import Button from '@/components/Button'
import Link from 'next/link'
import axios from 'axios';
import { activeUser } from '@/redux/slices/authSlice';
import { useDispatch, useSelector } from 'react-redux';
import { useRouter } from 'next/router';
import ErrorMsg from '@/components/ErrorMsg';

export default function Login() {
    const userAuthData = useSelector(state => state)
    const dispatch = useDispatch();
    const router = useRouter()
    let [showPass, setSetShowPass] = useState(false);
    useEffect(() => {
        if (userAuthData.authData.userInfo) {
            router.push('/product')
        }
    }, [])


    const [formData, setFormData] = useState({
        email: "",
        password: "",
    });

    const [formErrData, setFormErrData] = useState({
        email: "",
        password: "",
    });

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
        setFormErrData({ ...formErrData, [name]: "" })
    }

    const handleLoginSubmit = async () => {
        const validationPattern = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/

        if (formData.email === "") {
            setFormErrData({ ...formErrData, email: "Email Required." })
        } else if (!validationPattern.test(formData.email)) {
            setFormErrData({ ...formErrData, email: "Valid Email Required." })
        } else if (formData.password === "") {
            setFormErrData({ ...formErrData, password: "Password Required." })
        } else {
            let url = 'https://dev.funnelliner.com/api/v1/login'
            let config = {
                headers: {
                    "X-Requested-With": "XMLHttpRequest",
                    "ipaddress": "103.102.15.162",
                    "browsername": "Google Chrome",
                }
            }

            let loggedinUser = await axios.post(url, {
                email: formData.email,
                password: formData.password,
            }, config)


            if (loggedinUser.data.success == true) {
                dispatch(activeUser({
                    avatar: loggedinUser.data.data.avatar,
                    domain: loggedinUser.data.data.domain,
                    name: loggedinUser.data.data.name,
                    email: loggedinUser.data.data.email,
                    phone: loggedinUser.data.data.phone,
                    id: loggedinUser.data.data.id,
                    role: loggedinUser.data.data.role,
                    shop_id: loggedinUser.data.data.shop_id,
                    token: loggedinUser.data.token,
                    message: loggedinUser.data.message,
                    success: loggedinUser.data.success,
                }));

                localStorage.setItem("userInfo", JSON.stringify({
                    avatar: loggedinUser.data.data.avatar,
                    domain: loggedinUser.data.data.domain,
                    name: loggedinUser.data.data.name,
                    email: loggedinUser.data.data.email,
                    phone: loggedinUser.data.data.phone,
                    id: loggedinUser.data.data.id,
                    role: loggedinUser.data.data.role,
                    shop_id: loggedinUser.data.data.shop_id,
                    token: loggedinUser.data.token,
                    message: loggedinUser.data.message,
                    success: loggedinUser.data.success,
                }));

                router.push('/product')
            } else {
                console.log(loggedinUser.data.message)
            }
        }
    }




    return (
        <>
            <Head>
                <title>Login</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>


            <main className={styles.main}>
                <Div className="flex flex-col">
                    <Div className={styles.card}>
                        <Typhography as="h1" className="text-3xl font-bold underline mb-2 text-white">Login</Typhography>
                        <Typhography as='small' className='heading text-[#f3f4ff] text-xl font-medium opacity-50'>You can login enjoy it</Typhography>

                        <Div className="flex flex-col mt-5">

                            <Div className="block mb-5">
                                <Div className='relative'>
                                    <Div className="absolute inset-y-0 left-0 flex items-center pl-5">
                                        <FaEnvelope className='text-lg text-slate-400' />
                                    </Div>
                                    <InputBox onChange={handleChange} name='email' className='placeholder:text-slate-400 placeholder:text-lg block bg-white w-[25vw] border border-slate-300 text-xl font-semibold text-[#11175D] rounded-md py-4 pl-12 pr-3 shadow-sm focus:outline-none focus:border-sky-500 focus:ring-sky-500 focus:ring-1' type='email' placeholder='Email Address' />
                                </Div>

                                {formErrData.email &&
                                    <ErrorMsg className='bg-red-500 text-left text-white px-5 py-3 mt-3 font-medium text-lg rounded'>
                                        <Typhography as='h3'>{formErrData.email}</Typhography>
                                    </ErrorMsg>
                                }
                            </Div>

                            <Div className="block mb-5">
                                <Div className='relative'>
                                    <Div className="absolute inset-y-0 left-0 flex items-center pl-5">
                                        <FaKey className='text-lg text-slate-400' />
                                    </Div>
                                    <InputBox onChange={handleChange} name='password' className='placeholder:text-slate-400 placeholder:text-lg block bg-white w-[25vw] border border-slate-300 text-xl font-semibold text-[#11175D] rounded-md py-4 pl-12 pr-12 shadow-sm focus:outline-none focus:border-sky-500 focus:ring-sky-500 focus:ring-1' placeholder='Password' type={showPass ? 'text' : 'password'} />
                                    {showPass
                                        ?
                                        <Div className="absolute inset-y-0 right-0 flex items-center pl-5 pr-5 cursor-pointer">
                                            <VscEye onClick={() => { setSetShowPass(!showPass) }} className='text-lg text-slate-400' />
                                        </Div>
                                        :
                                        <Div className="absolute inset-y-0 right-0 flex items-center pl-5 pr-5 cursor-pointer">
                                            <VscEyeClosed onClick={() => { setSetShowPass(!showPass) }} className='text-lg text-slate-400' />
                                        </Div>
                                    }
                                </Div>
                                {formErrData.password &&
                                    <ErrorMsg className='bg-red-500 text-left text-white px-5 py-3 mt-3 font-medium text-lg rounded'>
                                        <Typhography as='h3'>{formErrData.password}</Typhography>
                                    </ErrorMsg>
                                }
                            </Div>
                        </Div>

                        <Button onClick={handleLoginSubmit} className='bg-[#086FA4] w-full text-white rounded-md py-4 text-xl mb-5'>Login</Button>


                        <Typhography as='small' className='heading text-[#e2e4ff] text-lg font-regular mt-5 block'>
                            Already have an account?
                            <Link href="/" className='text-white underline font-bold ml-2'>Register</Link>
                        </Typhography>

                        <Typhography as='small' className='heading text-[#e2e4ff] text-lg font-regular mt-5 block'>
                            <Link href="/forgot-password" className='text-white underline font-bold ml-2'>Forgot Password?</Link>
                        </Typhography>
                    </Div>


                </Div>
            </main>
        </>
    )
}
